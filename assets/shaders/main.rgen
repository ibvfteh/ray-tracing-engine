#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_control_flow_attributes : enable

struct RayPayload
{
	vec4 colorAndDistance; 
	vec4 scatterDirection; 
	uint randomSeed;
};

layout(location = 0) rayPayloadEXT RayPayload ray;

struct UniformBufferObject
{
    vec4 camPos;
    vec4 camDir;
    vec4 camUp;
    vec4 camSide;
    vec4 camNearFarFov;
    uint totalNumberOfSamples;
	uint numberOfSamples;
	uint numberOfBounces;
};

layout(binding = 0) uniform accelerationStructureEXT acc;
layout(binding = 1, rgba32f) uniform image2D outImage; 
layout(binding = 2, rgba32f) uniform image2D accImage; 
layout(binding = 3, std140) uniform UniformBufferObjectStruct { UniformBufferObject UBO; };


uint InitRandomSeed(uint val0, uint val1)
{
	uint v0 = val0, v1 = val1, s0 = 0;

	[[unroll]] 
	for (uint n = 0; n < 16; n++)
	{
		s0 += 0x9e3779b9;
		v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
		v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
	}

	return v0;
}

vec3 CalcRayDir(vec2 screenUV, float aspect) 
{
    vec3 u = UBO.camSide.xyz;
    vec3 v = UBO.camUp.xyz;

    const float planeWidth = tan(UBO.camNearFarFov.z * 0.5f);

    u *= (planeWidth * aspect);
    v *= planeWidth;

    const vec3 rayDir = normalize(UBO.camDir.xyz + (u * screenUV.x) - (v * screenUV.y));
    return rayDir;
}

void main() 
{    
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

    vec2 d = uv * 2.0 - 1.0;

    const float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
    
    vec3 pixelColor = vec3(0);
    
    ray.randomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), UBO.totalNumberOfSamples);

    for (uint i = 0; i < UBO.numberOfSamples; ++i)
    {
        vec3 origin = UBO.camPos.xyz;
        vec3 direction = CalcRayDir(d, aspect);
        vec3 rayColor = vec3(1);

        for (uint j = 0; j < UBO.numberOfBounces; ++j)
        {
            const uint rayFlags = gl_RayFlagsOpaqueEXT;
            const uint cullMask = 0xFF;
            const uint sbtRecordOffset = 0;
            const uint sbtRecordStride = 0;
            const uint missIndex = 0;
            const float tmin = 0.001f;
            const float tmax = 100.0f;
            const int payloadLocation = 0;

            traceRayEXT(acc,
                    rayFlags,
                    cullMask,
                    sbtRecordOffset,
                    sbtRecordStride,
                    missIndex,
                    origin,
                    tmin,
                    direction,
                    tmax,
                    payloadLocation);

                    
            const vec3 hitColor = ray.colorAndDistance.rgb;
            const float t = ray.colorAndDistance.w;
            const bool isScattered = ray.scatterDirection.w > 0;

            rayColor *= hitColor;

            if (t < 0 || !isScattered)
            {				
                break;
            }

            origin = origin + t * direction;
            direction = ray.scatterDirection.xyz;
        }

        pixelColor += rayColor;
    }

    //pixelColor = pixelColor / UBO.numberOfSamples;
    
	const bool accumulate = UBO.numberOfSamples != UBO.totalNumberOfSamples;
	const vec3 accumulatedColor = (accumulate ? imageLoad(accImage, ivec2(gl_LaunchIDEXT.xy)) : vec4(0)).rgb + pixelColor;

	pixelColor = accumulatedColor / UBO.totalNumberOfSamples;

    imageStore(accImage, ivec2(gl_LaunchIDEXT), vec4(accumulatedColor, 1.0f));
    imageStore(outImage, ivec2(gl_LaunchIDEXT), vec4(pixelColor, 1.0f));
}
