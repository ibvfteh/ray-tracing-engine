#version 460 core
#extension GL_EXT_ray_tracing : enable

layout(location = 0) rayPayloadEXT vec3 resultColor;

struct UniformBufferObject
{
    vec4 camPos;
    vec4 camDir;
    vec4 camUp;
    vec4 camSide;
    vec4 camNearFarFov;
};

layout(binding = 0) uniform accelerationStructureEXT acc;
layout(binding = 1, rgba32f) uniform image2D img; 
layout(binding = 2, std140) uniform UniformBufferObjectStruct { UniformBufferObject UBO; };

vec3 CalcRayDir(vec2 screenUV, float aspect) 
{
    vec3 u = UBO.camSide.xyz;
    vec3 v = UBO.camUp.xyz;

    const float planeWidth = tan(UBO.camNearFarFov.z * 0.5f);

    u *= (planeWidth * aspect);
    v *= planeWidth;

    const vec3 rayDir = normalize(UBO.camDir.xyz + (u * screenUV.x) - (v * screenUV.y));
    return rayDir;
}

void main() 
{    
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

    vec2 d = uv * 2.0 - 1.0;

    const float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);

    vec3 origin = UBO.camPos.xyz;
    vec3 direction = CalcRayDir(d, aspect);

    const uint rayFlags = gl_RayFlagsOpaqueEXT;
    const uint cullMask = 0xFF;
    const uint sbtRecordOffset = 0;
    const uint sbtRecordStride = 0;
    const uint missIndex = 0;
    const float tmin = 0.0f;
    const float tmax = 10.0f;
    const int payloadLocation = 0;

    resultColor = vec3(0);
    traceRayEXT(acc,
             rayFlags,
             cullMask,
             sbtRecordOffset,
             sbtRecordStride,
             missIndex,
             origin,
             tmin,
             direction,
             tmax,
             payloadLocation);

    imageStore(img, ivec2(gl_LaunchIDEXT), vec4(resultColor, 1.0f));
}
